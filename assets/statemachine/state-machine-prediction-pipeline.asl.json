{
  "Comment": "",
  "StartAt": "trigger anomaly crawler",
  "States": {
    "trigger anomaly crawler": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${LambdaTriggerCrawlerFunctionName}",
        "Payload": {
          "crawler_name": "${AnomalyCrawler}",
          "ModelName.$": "$.ModelName",
          "Meter_start.$": "$.Meter_start",
          "Meter_end.$": "$.Meter_end",
          "Data_start.$": "$.Data_start",
          "Data_end.$": "$.Data_end",
          "Batch_size.$": "$.Batch_size",
          "With_weather_data.$": "$.With_weather_data",
          "Forecast_period.$": "$.Forecast_period"
        }
      },
      "OutputPath": "$.Payload",
      "Next": "wait for crawler"
    },
    "wait for crawler": {
      "Type": "Wait",
      "Seconds": 10,
      "Next": "get crawler state"
    },
    "get crawler state": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${LambdaGetCrawlerStateFunctionName}",
        "Payload": {
          "crawler_name": "${AnomalyCrawler}",
          "ModelName.$": "$.ModelName",
          "Meter_start.$": "$.Meter_start",
          "Meter_end.$": "$.Meter_end",
          "Data_start.$": "$.Data_start",
          "Data_end.$": "$.Data_end",
          "Batch_size.$": "$.Batch_size",
          "With_weather_data.$": "$.With_weather_data",
          "Forecast_period.$": "$.Forecast_period"
        }
      },
      "OutputPath": "$.Payload",
      "Next": "is crawler ready"
    },
    "is crawler ready": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.crawler_state",
            "StringEquals": "READY"
          },
          "Next": "wait for crawler"
        }
      ],
      "Default": "Prepare batches"
    },
    "Prepare batches": {
      "Parameters": {
        "FunctionName": "${LambdaSplitFunctionName}",
        "Payload": {
          "S3_bucket": "${WorkingBucket}",
          "Athena_bucket": "${AthenaQueryBucket}",
          "ModelName.$": "$.ModelName",
          "Meter_start.$": "$.Meter_start",
          "Meter_end.$": "$.Meter_end",
          "Data_start.$": "$.Data_start",
          "Data_end.$": "$.Data_end",
          "Batch_size.$": "$.Batch_size",
          "With_weather_data.$": "$.With_weather_data",
          "Forecast_period.$": "$.Forecast_period"
        }
      },
      "Resource": "arn:aws:states:::lambda:invoke",
      "Type": "Task",
      "ResultPath": "$.batchdetail",
      "Next": "Process batches"
    },
    "Process batches": {
      "Type": "Map",
      "Next": "trigger forcast crawler",
      "InputPath": "$",
      "ItemsPath": "$.batchdetail.Payload",
      "Parameters": {
        "LambdaPrepareFunctionName": "${LambdaPrepareFunctionName}",
        "LambdaResultFunctionName": "${LambdaResultFunctionName}",
        "ModelName.$": "$.ModelName",
        "Athena_bucket": "${AthenaQueryBucket}",
        "S3_bucket": "${WorkingBucket}",
        "Data_start.$": "$.Data_start",
        "Data_end.$": "$.Data_end",
        "Batch_info.$": "$$.Map.Item.Value",
        "With_weather_data.$": "$.With_weather_data",
        "Forecast_period.$": "$.Forecast_period"
      },
      "Iterator": {
        "StartAt": "Anomaly detecton",
        "States": {
          "Anomaly detecton": {
            "Parameters": {
              "FunctionName": "${LambdaAnomalyFunctionName}",
              "Payload": {
                "Athena_bucket": "${AthenaQueryBucket}",
                "S3_bucket": "${WorkingBucket}",
                "Batch_start.$": "$.Batch_info.Batch_start",
                "Batch_end.$": "$.Batch_info.Batch_end",
                "Data_start.$": "$.Data_start",
                "Data_end.$": "$.Data_end",
                "Forecast_period.$": "$.Forecast_period"
              }
            },
            "Resource": "arn:aws:states:::lambda:invoke",
            "Type": "Task",
            "ResultPath": null,
            "Next": "Prepare dataset"
          },
          "Prepare dataset": {
            "Parameters": {
              "FunctionName": "${LambdaPrepareFunctionName}",
              "Payload": {
                "Athena_bucket": "${AthenaQueryBucket}",
                "S3_bucket": "${WorkingBucket}",
                "Batch_start.$": "$.Batch_info.Batch_start",
                "Batch_end.$": "$.Batch_info.Batch_end",
                "Data_start.$": "$.Data_start",
                "Data_end.$": "$.Data_end",
                "With_weather_data.$": "$.With_weather_data",
                "Forecast_period.$": "$.Forecast_period"
              }
            },
            "Resource": "arn:aws:states:::lambda:invoke",
            "Type": "Task",
            "ResultPath": null,
            "Next": "Transform Input Dataset"
          },
          "Transform Input Dataset": {
            "Resource": "arn:aws:states:::sagemaker:createTransformJob.sync",
            "Parameters": {
              "TransformJobName.$": "$.Batch_info.Batch_job",
              "ModelName.$": "$.ModelName",
              "TransformInput": {
                "DataSource": {
                  "S3DataSource": {
                    "S3DataType": "S3Prefix",
                    "S3Uri.$": "$.Batch_info.Batch_input"
                  }
                },
                "ContentType": "application/jsonlines",
                "SplitType": "Line"
              },
              "TransformOutput": {
                "S3OutputPath.$": "$.Batch_info.Batch_output",
                "AssembleWith": "Line"
              },
              "TransformResources": {
                "InstanceCount": 1,
                "InstanceType": "ml.m4.xlarge"
              }
            },
            "Type": "Task",
            "ResultPath": null,
            "Next": "Store Results"
          },
          "Store Results": {
            "Parameters": {
              "FunctionName": "${LambdaResultFunctionName}",
              "Payload": {
                "Athena_bucket": "${AthenaQueryBucket}",
                "S3_bucket": "${WorkingBucket}",
                "Batch_start.$": "$.Batch_info.Batch_start",
                "Batch_end.$": "$.Batch_info.Batch_end",
                "Data_start.$": "$.Data_start",
                "Data_end.$": "$.Data_end",
                "Forecast_period.$": "$.Forecast_period"
              }
            },
            "ResultPath": "$.mytask",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Type": "Task",
            "End": true
          }
        }
      }
    },
    "trigger forcast crawler": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${LambdaTriggerCrawlerFunctionName}",
        "Payload": {
          "crawler_name": "${ForcastCrawler}"
        }
      },
      "OutputPath": "$.Payload",
      "Next": "wait for forcast crawler"
    },
    "wait for forcast crawler": {
      "Type": "Wait",
      "Seconds": 10,
      "Next": "get forcast crawler state"
    },
    "get forcast crawler state": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${LambdaGetCrawlerStateFunctionName}",
        "Payload": {
          "crawler_name": "${ForcastCrawler}"
        }
      },
      "OutputPath": "$.Payload",
      "Next": "is forcast crawler ready"
    },
    "is forcast crawler ready": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.crawler_state",
            "StringEquals": "READY"
          },
          "Next": "wait for forcast crawler"
        }
      ],
      "Default": "Finish"
    },
    "Finish": {
      "Type": "Succeed"
    }
  }
}