AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'Meter Data Lake prediction pipeline'
Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']

Globals:
  Function:
    Runtime: python3.7
    Environment:
      Variables:
        Db_schema: meter-data

Resources:

  AthenaQueryBucket:
    Type: AWS::S3::Bucket

  WorkingBucket:
    Type: AWS::S3::Bucket

  # init training statemachine
  InitialTrainingStateMachine:
    Type: 'AWS::Serverless::StateMachine'
    Properties:
      DefinitionUri:
        Bucket: !Ref QSS3BucketName
        Key:
          Fn::Sub: '${QSS3KeyPrefix}assets/statemachine/state-machine-training.asl.json'
      DefinitionSubstitutions:
        AthenaQueryBucket: !Ref AthenaQueryBucket
        WorkingBucket: !Ref WorkingBucket
        LambdaPrepareTrainingName: !Ref PrepareTrainingFunction
        AccountId: !Sub ${AWS::AccountId}
        SageMakerRole: !GetAtt SageMakerRole.Arn
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - events:PutTargets
                - events:PutRule
                - events:DescribeRule
              Resource: "*"
            - Effect: Allow
              Action:
                - "iam:PassRole"
              Resource: "*"
            - Effect: Allow
              Action:
                - sagemaker:CreateTransformJob
                - sagemaker:DescribeTransformJob
                - sagemaker:StopTransformJob
                - sagemaker:CreateTrainingJob
                - sagemaker:DescribeTrainingJob
                - sagemaker:StopTrainingJob
                - sagemaker:CreateHyperParameterTuningJob
                - sagemaker:DescribeHyperParameterTuningJob
                - sagemaker:StopHyperParameterTuningJob
                - sagemaker:CreateModel
                - sagemaker:CreateEndpointConfig
                - sagemaker:CreateEndpoint
                - sagemaker:DeleteEndpointConfig
                - sagemaker:DeleteEndpoint
                - sagemaker:UpdateEndpoint
                - sagemaker:ListTags
              Resource: "arn:aws:sagemaker:*:*:*"
        - LambdaInvokePolicy:
            FunctionName: !Ref PrepareTrainingFunction


  # Step functions state machine
  PredictionPipelineStateMachine:
    Type: 'AWS::Serverless::StateMachine'
    Properties:
      DefinitionUri:
        Bucket: !Ref QSS3BucketName
        Key:
          Fn::Sub: '${QSS3KeyPrefix}assets/statemachine/state-machine-prediction-pipeline.asl.json'
      DefinitionSubstitutions:
        AthenaQueryBucket: !Ref AthenaQueryBucket
        WorkingBucket: !Ref WorkingBucket
        LambdaSplitFunctionName: !Ref SplitBatchFunction
        LambdaPrepareFunctionName: !Ref PrepareBatchFunction
        LambdaResultFunctionName: !Ref UploadResultFunction
        LambdaAnomalyFunctionName: !Ref BatchAnomalyDetection
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - events:PutTargets
                - events:PutRule
                - events:DescribeRule
              Resource: "*"
            - Effect: Allow
              Action:
                  - sagemaker:CreateTransformJob
                  - sagemaker:DescribeTransformJob
                  - sagemaker:StopTransformJob
                  - sagemaker:CreateTrainingJob
                  - sagemaker:DescribeTrainingJob
                  - sagemaker:StopTrainingJob
                  - sagemaker:CreateHyperParameterTuningJob
                  - sagemaker:DescribeHyperParameterTuningJob
                  - sagemaker:StopHyperParameterTuningJob
                  - sagemaker:CreateModel
                  - sagemaker:CreateEndpointConfig
                  - sagemaker:CreateEndpoint
                  - sagemaker:DeleteEndpointConfig
                  - sagemaker:DeleteEndpoint
                  - sagemaker:UpdateEndpoint
                  - sagemaker:ListTags
              Resource: "arn:aws:sagemaker:*:*:*"
        - LambdaInvokePolicy:
            FunctionName: !Ref SplitBatchFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref BatchAnomalyDetection
        - LambdaInvokePolicy:
            FunctionName: !Ref PrepareBatchFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref UploadResultFunction

  #
  # Lambda functions
  #
  PrepareTrainingFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      MemorySize: 512
      Timeout: 600
      CodeUri:
        Bucket: !Ref QSS3BucketName
        Key:
          Fn::Sub: '${QSS3KeyPrefix}assets/functions/packages/prepare_training.zip'
      Handler: app.lambda_handler
      Role: !GetAtt 'ExecuteLambdaRole.Arn'
      Layers:
        - !Ref DependencyLayer

  SplitBatchFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Timeout: 180
      CodeUri:
        Bucket: !Ref QSS3BucketName
        Key:
          Fn::Sub: '${QSS3KeyPrefix}assets/functions/packages/split_batch.zip'
      Handler: app.lambda_handler
      Role: !GetAtt 'ExecuteLambdaRole.Arn'

  PrepareBatchFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Timeout: 300
      CodeUri:
        Bucket: !Ref QSS3BucketName
        Key:
          Fn::Sub: '${QSS3KeyPrefix}assets/functions/packages/prepare_batch.zip'
      Handler: app.lambda_handler
      Role: !GetAtt 'ExecuteLambdaRole.Arn'
      Layers:
        - !Ref DependencyLayer

  UploadResultFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Timeout: 180
      CodeUri:
        Bucket: !Ref QSS3BucketName
        Key:
          Fn::Sub: '${QSS3KeyPrefix}assets/functions/packages/upload_result.zip'
      Handler: app.lambda_handler
      Role: !GetAtt 'ExecuteLambdaRole.Arn'
      Layers:
        - !Ref DependencyLayer

  BatchAnomalyDetection:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.7
      CodeUri:
        Bucket: !Ref QSS3BucketName
        Key:
          Fn::Sub: '${QSS3KeyPrefix}assets/functions/packages/batch_anomaly_detection.zip'
      MemorySize: 2048
      Timeout: 600
      Environment:
        Variables:
          Db_schema: meter-data
      Role: !GetAtt 'ExecuteLambdaRole.Arn'
      Layers:
        - !Ref BatchAnomalyDependencyLayer

  #
  # Lambda Dependency Layer
  #
  BatchAnomalyDependencyLayer:
    Type: 'AWS::Serverless::LayerVersion'
    Properties:
      LayerName: ml-app-dependencies
      Description: Dependencies for sam app
      ContentUri:
        Bucket: !Ref QSS3BucketName
        Key:
          Fn::Sub: '${QSS3KeyPrefix}assets/functions/packages/dependencies/anomaly_detection/layer.zip'
      CompatibleRuntimes:
        - python3.7
      LicenseInfo: 'Available under the MIT-0 license.'
      RetentionPolicy: Retain

  DependencyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: common-app-dependencies
      ContentUri:
        Bucket: !Ref QSS3BucketName
        Key:
          Fn::Sub: '${QSS3KeyPrefix}assets/functions/packages/dependencies/common/common-layer.zip'
      CompatibleRuntimes:
        - python3.7
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain

  #
  # IAM roles
  #
  ExecuteLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonAthenaFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'

  SageMakerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'sagemaker.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonAthenaFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
Parameters:
  QSS3BucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: aws-quickstart
    Description: >-
      S3 bucket name for the Quick Start assets.
      Only change this value if you customize or extend the Quick Start for your own use.
      This string can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: '^[0-9a-zA-Z-/]*[/]$'
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/) and must terminate in a forward slash.
    Default: quickstart-aws-utility-meter-data-analytics-platform/
    Type: String
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
