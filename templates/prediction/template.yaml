Transform: AWS::Serverless-2016-10-31
Description: 'Meter Data Lake prediction pipeline'
Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']

Globals:
  Function:
    Runtime: python3.7
    Environment:
      Variables:
        Db_schema: meter-data

Resources:

  AthenaQueryBucket:
    Type: AWS::S3::Bucket

  WorkingBucket:
    Type: AWS::S3::Bucket

  # init training statemachine
  InitialTrainingStateMachine:
    Type: 'AWS::Serverless::StateMachine'
    Properties:
      DefinitionUri: '../../assets/statemachine/state-machine-training.asl.json'
      DefinitionSubstitutions:
        AthenaQueryBucket: !Ref AthenaQueryBucket
        WorkingBucket: !Ref WorkingBucket
        LambdaPrepareTrainingName: !Ref PrepareTrainingFunction
        AccountId: !Sub ${AWS::AccountId}
        SageMakerRole: !GetAtt SageMakerRole.Arn
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - events:PutTargets
                - events:PutRule
                - events:DescribeRule
              Resource: "*"
            - Effect: Allow
              Action:
                - "iam:PassRole"
              Resource: "*"
            - Effect: Allow
              Action:
                - sagemaker:CreateTransformJob
                - sagemaker:DescribeTransformJob
                - sagemaker:StopTransformJob
                - sagemaker:CreateTrainingJob
                - sagemaker:DescribeTrainingJob
                - sagemaker:StopTrainingJob
                - sagemaker:CreateHyperParameterTuningJob
                - sagemaker:DescribeHyperParameterTuningJob
                - sagemaker:StopHyperParameterTuningJob
                - sagemaker:CreateModel
                - sagemaker:CreateEndpointConfig
                - sagemaker:CreateEndpoint
                - sagemaker:DeleteEndpointConfig
                - sagemaker:DeleteEndpoint
                - sagemaker:UpdateEndpoint
                - sagemaker:ListTags
              Resource: "arn:aws:sagemaker:*:*:*"
        - LambdaInvokePolicy:
            FunctionName: !Ref PrepareTrainingFunction


  # Step functions state machine
  PredictionPipelineStateMachine:
    Type: 'AWS::Serverless::StateMachine'
    Properties:
      DefinitionUri: '../../assets/statemachine/state-machine-prediction-pipeline.asl.json'
      DefinitionSubstitutions:
        AthenaQueryBucket: !Ref AthenaQueryBucket
        WorkingBucket: !Ref WorkingBucket
        LambdaSplitFunctionName: !Ref SplitBatchFunction
        LambdaPrepareFunctionName: !Ref PrepareBatchFunction
        LambdaResultFunctionName: !Ref UploadResultFunction
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - events:PutTargets
                - events:PutRule
                - events:DescribeRule
              Resource: "*"
            - Effect: Allow
              Action:
                  - sagemaker:CreateTransformJob
                  - sagemaker:DescribeTransformJob
                  - sagemaker:StopTransformJob
                  - sagemaker:CreateTrainingJob
                  - sagemaker:DescribeTrainingJob
                  - sagemaker:StopTrainingJob
                  - sagemaker:CreateHyperParameterTuningJob
                  - sagemaker:DescribeHyperParameterTuningJob
                  - sagemaker:StopHyperParameterTuningJob
                  - sagemaker:CreateModel
                  - sagemaker:CreateEndpointConfig
                  - sagemaker:CreateEndpoint
                  - sagemaker:DeleteEndpointConfig
                  - sagemaker:DeleteEndpoint
                  - sagemaker:UpdateEndpoint
                  - sagemaker:ListTags
              Resource: "arn:aws:sagemaker:*:*:*"
        - LambdaInvokePolicy:
            FunctionName: !Ref SplitBatchFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref PrepareBatchFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref UploadResultFunction

  #
  # Lambda functions
  #
  PrepareTrainingFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      MemorySize: 512
      Timeout: 600
      CodeUri: ../../assets/functions/prepare_training
      Handler: app.lambda_handler
      Role: !GetAtt 'ExecuteLambdaRole.Arn'
      Layers:
        - !Ref DependencyLayer

  SplitBatchFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Timeout: 180
      CodeUri: ../../assets/functions/split_batch
      Handler: app.lambda_handler
      Role: !GetAtt 'ExecuteLambdaRole.Arn'

  PrepareBatchFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Timeout: 300
      CodeUri: ../../assets/functions/prepare_batch
      Handler: app.lambda_handler
      Role: !GetAtt 'ExecuteLambdaRole.Arn'
      Layers:
        - !Ref DependencyLayer

  UploadResultFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Timeout: 180
      CodeUri: ../../assets/functions/upload_result
      Handler: app.lambda_handler
      Role: !GetAtt 'ExecuteLambdaRole.Arn'
      Layers:
        - !Ref DependencyLayer

  DependencyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: common-app-dependencies
      ContentUri: ../../assets/functions/dependencies/common
      CompatibleRuntimes:
        - python3.7
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.7

  #
  # IAM roles
  #
  ExecuteLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonAthenaFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSageMakerReadOnly'

  SageMakerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'sagemaker.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonAthenaFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSageMakerReadOnly'

Parameters:
  QSS3BucketName:
    Type: String
    Default: cf-meter-data
    Description: AWS Quick Start S3 bucket name where the Quick Start assets are hosted

  QSS3KeyPrefix:
    Type: String
    Default: temp/
    Description: S3 bucket key prefix for the AWS Quick Start assets
