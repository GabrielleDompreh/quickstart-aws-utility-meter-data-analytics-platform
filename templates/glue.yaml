AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates Glue resources"
Conditions:
  CreateLZS3BucketCondition: !Equals [!Ref CreateLandingZoneS3Bucket, 'Yes']
Mappings:
    LandingzoneTransformerMap:
        default:
            script: "transform_raw_to_clean.py"
        london:
            script: "transform_raw_to_clean_london.py"

Resources:
    GlueWorkflow:
        Type: AWS::Glue::Workflow
        Properties:
            Name: meter-data-pipeline
            Description: Workflow for manufactured meter data analytics

    LogsLogGroup:
        Type: "AWS::Logs::LogGroup"


    GlueCrawler4:
        Type: "AWS::Glue::Crawler"
        Properties:
            Name: "meter-data-business-daily-crawler"
            Role: !Sub "service-role/${IAMRole}"
            Targets:
                S3Targets:
                    -
                        Path: !Sub "s3://${BusinessZoneS3Bucket}/daily"
            DatabaseName: !Ref DBName
            SchemaChangePolicy:
                UpdateBehavior: "LOG"
                DeleteBehavior: "DEPRECATE_IN_DATABASE"

    GlueCrawler5:
        Type: "AWS::Glue::Crawler"
        Properties:
            Name: "meter-data-clean-crawler"
            Role: !Sub "service-role/${IAMRole}"
            Targets:
                S3Targets:
                    -
                        Path: !Sub "s3://${CleanZoneS3Bucket}"
            DatabaseName: !Ref DBName
            SchemaChangePolicy:
                UpdateBehavior: "LOG"
                DeleteBehavior: "DEPRECATE_IN_DATABASE"

    GlueCrawler6:
        Type: "AWS::Glue::Crawler"
        Properties:
            Name: "meter-data-raw-crawler"
            Role: !Sub "service-role/${IAMRole}"
            Targets:
                S3Targets:
                    -
                        Path: !If 
                            - CreateLZS3BucketCondition
                            - !Sub "s3://${LandingZoneS3Bucket}"
                            - !Sub "s3://${LandingZoneS3BucketName}"
            DatabaseName: !Ref DBName
            SchemaChangePolicy:
                UpdateBehavior: "UPDATE_IN_DATABASE"
                DeleteBehavior: "DEPRECATE_IN_DATABASE"
            Configuration: "{\"Version\":1.0,\"CrawlerOutput\":{\"Partitions\":{\"AddOrUpdateBehavior\":\"InheritFromTable\"}},\"Grouping\":{\"TableGroupingPolicy\":\"CombineCompatibleSchemas\"}}"

    GlueJob4:
        Type: "AWS::Glue::Job"
        Properties:
            Name: "business_daily_to_redshift.py"
            Role: !GetAtt IAMRole.Arn
            ExecutionProperty:
                MaxConcurrentRuns: 1
            Command:
                Name: "glueetl"
                ScriptLocation: !Sub "s3://${GlueScriptsS3Bucket}/admin/business_daily_to_redshift.py"
                PythonVersion: "3"
            DefaultArguments:
                --TempDir: !Sub "s3://${GlueTempS3Bucket}/admin"
                --enable-metrics: ""
                --enable-continuous-cloudwatch-log: "true"
                --enable-continuous-log-filter: "true"
                --job-bookmark-option: "job-bookmark-enable"
                --job-language: "python"
                --db_name: !Ref DBName
                --redshift_connection: !Ref GlueConnection
                --temp_workflow_bucket: !Ref TempWorkflowS3Bucket
            Connections:
                Connections:
                    - !Ref GlueConnection
            MaxRetries: 0
            #AllocatedCapacity: 5
            Timeout: 2880
            GlueVersion: "1.0"
            MaxCapacity: 5

    GlueJob5:
        Type: "AWS::Glue::Job"
        Properties:
            Name: "transform_clean_to_business_partition.py"
            Role: !GetAtt IAMRole.Arn
            ExecutionProperty:
                MaxConcurrentRuns: 1
            Command:
                Name: "glueetl"
                ScriptLocation: !Sub "s3://${GlueScriptsS3Bucket}/admin/transform_clean_to_business_partition.py"
                PythonVersion: "3"
            DefaultArguments:
                --TempDir: !Sub "s3://${GlueTempS3Bucket}/admin"
                --enable-metrics: ""
                --enable-continuous-cloudwatch-log: "true"
                --enable-continuous-log-filter: "true"
                --job-bookmark-option: "job-bookmark-enable"
                --job-language: "python"
                --db_name: !Ref DBName
                --table_name: !Ref CleanZoneS3Bucket
                --business_zone_bucket: !Ref BusinessZoneS3Bucket
                --temp_workflow_bucket: !Ref TempWorkflowS3Bucket
            MaxRetries: 0
            #AllocatedCapacity: 5
            Timeout: 2880
            GlueVersion: "1.0"
            MaxCapacity: 5

    GlueJob6:
        Type: "AWS::Glue::Job"
        Properties:
            Name: "transform_raw_to_clean.py"
            Role: !GetAtt IAMRole.Arn
            ExecutionProperty:
                MaxConcurrentRuns: 1
            Command:
                Name: "glueetl"
                ScriptLocation: !Sub
                        - s3://${GlueScriptsS3Bucket}/admin/${script}
                        - {script: !FindInMap [LandingzoneTransformerMap, !Ref LandingzoneTransformer, "script"]}
                PythonVersion: "3"
            DefaultArguments:
                --TempDir: !Sub "s3://${GlueTempS3Bucket}/admin"
                --enable-metrics: ""
                --enable-continuous-cloudwatch-log: "true"
                --enable-continuous-log-filter: "true"
                --job-bookmark-option: "job-bookmark-enable"
                --job-language: "python"
                --db_name: !Ref DBName
                --table_name: !If 
                    - CreateLZS3BucketCondition
                    - !Ref LandingZoneS3Bucket
                    - !Ref LandingZoneS3BucketName
                --clean_data_bucket: !Ref CleanZoneS3Bucket
                --temp_workflow_bucket: !Ref TempWorkflowS3Bucket
            MaxRetries: 0
            #AllocatedCapacity: 5
            Timeout: 2880
            GlueVersion: "1.0"
            MaxCapacity: 5

    GlueJobCisDataToRedshift:
        Type: "AWS::Glue::Job"
        Properties:
            Name: "cis_to_redshift.py"
            Role: !GetAtt IAMRole.Arn
            ExecutionProperty:
                MaxConcurrentRuns: 1
            Command:
                Name: "glueetl"
                ScriptLocation: !Sub "s3://${GlueScriptsS3Bucket}/admin/cis_to_redshift.py"
                PythonVersion: "3"
            DefaultArguments:
                --TempDir: !Sub "s3://${GlueTempS3Bucket}/admin"
                --enable-metrics: ""
                --enable-continuous-cloudwatch-log: "true"
                --enable-continuous-log-filter: "true"
                --job-bookmark-option: "job-bookmark-enable"
                --job-language: "python"
                --db_name: !Ref DBName
                --redshift_connection: !Ref GlueConnection
                --cis-bucket: !Ref CisS3Bucket
            Connections:
                Connections:
                    - !Ref GlueConnection
            MaxRetries: 0
            #AllocatedCapacity: 5
            Timeout: 2880
            GlueVersion: "1.0"
            MaxCapacity: 5

    GlueTrigger:
        Type: "AWS::Glue::Trigger"
        Properties:
            Actions:
                - CrawlerName: !Ref GlueCrawler6
            Name: "ScheduledStart"
            Type: SCHEDULED
            Description: "Scheduled trigger, 9am each day"
            Schedule: cron(0 */9 * * ? *)
            WorkflowName: !Ref GlueWorkflow

    GlueTrigger2:
        Type: "AWS::Glue::Trigger"
        Properties:
            Actions:
                - CrawlerName: !Ref GlueCrawler5
            Name: "clean-data-crawler"
            Type: "CONDITIONAL"
            StartOnCreation: true
            WorkflowName: !Ref GlueWorkflow
            Predicate:
                Conditions:
                    -
                        LogicalOperator: "EQUALS"
                        JobName: !Ref GlueJob6
                        State: "SUCCEEDED"

    GlueTrigger3:
        Type: "AWS::Glue::Trigger"
        Properties:
            Name: "export-to-redshift"
            Type: "CONDITIONAL"
            StartOnCreation: true
            WorkflowName: !Ref GlueWorkflow
            Actions:
                - JobName: !Ref GlueJob4
            Predicate:
                Logical: "AND"
                Conditions:
                    -
                        LogicalOperator: "EQUALS"
                        CrawlerName: !Ref GlueCrawler4
                        CrawlState: "SUCCEEDED"

    GlueTrigger4:
        Type: "AWS::Glue::Trigger"
        Properties:
            Name: "trigger-business-daily-crawler"
            Type: "CONDITIONAL"
            StartOnCreation: true
            WorkflowName: !Ref GlueWorkflow
            Actions:
                - CrawlerName: !Ref GlueCrawler4
            Predicate:
                Conditions:
                    -
                        LogicalOperator: "EQUALS"
                        JobName: !Ref GlueJob5
                        State: "SUCCEEDED"

    GlueTrigger5:
        Type: "AWS::Glue::Trigger"
        Properties:
            Name: "trigger-clean-to-business"
            Type: "CONDITIONAL"
            StartOnCreation: true
            WorkflowName: !Ref GlueWorkflow
            Actions:
                - JobName: !Ref GlueJob5
            Predicate:
                Conditions:
                    -
                        LogicalOperator: "EQUALS"
                        CrawlerName: !Ref GlueCrawler5
                        CrawlState: "SUCCEEDED"


    GlueTrigger10:
        Type: "AWS::Glue::Trigger"
        Properties:
            Name: "trigger-raw-to-clean"
            Type: "CONDITIONAL"
            StartOnCreation: true
            WorkflowName: !Ref GlueWorkflow
            Actions:
                - JobName: !Ref GlueJob6
            Predicate:
                Conditions:
                    -
                        LogicalOperator: "EQUALS"
                        CrawlerName: !Ref GlueCrawler6
                        CrawlState: "SUCCEEDED"

    IAMManagedPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "MeterData-S3Bucket-Access-Policy"
            Path: "/service-role/"
            PolicyDocument: !If 
                - CreateLZS3BucketCondition
                - !Sub |
                    {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "s3:*"
                                ],
                                "Resource": [
                                    "arn:aws:s3:::${BusinessZoneS3Bucket}",
                                    "arn:aws:s3:::${LandingZoneS3Bucket}",
                                    "arn:aws:s3:::${CleanZoneS3Bucket}",
                                    "arn:aws:s3:::${TempWorkflowS3Bucket}",
                                    "arn:aws:s3:::${GlueScriptsS3Bucket}",
                                    "arn:aws:s3:::${GlueTempS3Bucket}"
                                ]
                            }
                        ]
                    }
                - !Sub |
                    {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "s3:*"
                                ],
                                "Resource": [
                                    "arn:aws:s3:::${BusinessZoneS3Bucket}",
                                    "arn:aws:s3:::${LandingZoneS3BucketName}",
                                    "arn:aws:s3:::${CleanZoneS3Bucket}",
                                    "arn:aws:s3:::${TempWorkflowS3Bucket}",
                                    "arn:aws:s3:::${GlueScriptsS3Bucket}",
                                    "arn:aws:s3:::${GlueTempS3Bucket}"
                                ]
                            }
                        ]
                    }

    IAMRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "AWSGlueServiceRole-Meter-LandingZone"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"glue.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
                - !Ref IAMManagedPolicy
                - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
                - "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
                - "arn:aws:iam::aws:policy/AmazonRedshiftFullAccess"

    BusinessZoneS3Bucket:
        Type: "AWS::S3::Bucket"

    LandingZoneS3Bucket:
        Type: "AWS::S3::Bucket"
        Condition: CreateLZS3BucketCondition

    CleanZoneS3Bucket:
        Type: "AWS::S3::Bucket"

    TempWorkflowS3Bucket:
        Type: "AWS::S3::Bucket"

    CisS3Bucket:
        Type: "AWS::S3::Bucket"

    GlueDatabase:
        Type: "AWS::Glue::Database"
        Properties:
            DatabaseInput:
                Name: !Ref DBName
            CatalogId: !Ref "AWS::AccountId"

    GlueConnection:
        Type: "AWS::Glue::Connection"
        Properties:
            ConnectionInput:
                Description: ""
                ConnectionType: "JDBC"
                PhysicalConnectionRequirements:
                    SubnetId: !Ref Subnet1ID
                    SecurityGroupIdList:
                        - !GetAtt GlueSecurityGroup.GroupId
                        - !Ref RedshiftSecurityGroupId
                    AvailabilityZone: !Ref AvailabilityZone
                ConnectionProperties:
                    "JDBC_CONNECTION_URL": !Sub "jdbc:redshift://${RedshiftClusterEndpoint}/${DBName}"
                    "JDBC_ENFORCE_SSL": "false"
                    PASSWORD: !Ref MasterUserPassword
                    USERNAME: !Ref MasterUsername
                Name: !Ref ClusterName
            CatalogId: !Ref "AWS::AccountId"

    GlueSecurityGroup:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: Security group for Glue
            VpcId: !Ref VPCID
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: !Ref RedshiftPort
                  ToPort: !Ref RedshiftPort
                  CidrIp: !Ref RemoteAccessCIDR
                  Description: 'Glue Access to VPC CIDR'

    SelfReferencingIngress:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            Description: Self referencing security group ingress rule for glue access
            FromPort: -1
            GroupId: !Ref GlueSecurityGroup
            IpProtocol: "-1"
            SourceSecurityGroupId: !Ref GlueSecurityGroup
            ToPort: -1

    EC2VPCEndpoint:
        Type: "AWS::EC2::VPCEndpoint"
        Properties:
            VpcEndpointType: "Gateway"
            VpcId: !Ref VPCID
            ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
            PolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":\"*\",\"Action\":\"*\",\"Resource\":\"*\"}]}"
            RouteTableIds:
                - !Ref VPCRouteTableId
            PrivateDnsEnabled: false

Outputs:
    LandingZoneS3Bucket:
        Value: !If 
            - CreateLZS3BucketCondition
            - !Ref LandingZoneS3Bucket
            - !Ref LandingZoneS3BucketName
    CleanZoneS3Bucket:
        Value: !Ref CleanZoneS3Bucket
    TempWorkflowS3Bucket:
        Value: !Ref TempWorkflowS3Bucket
    BusinessZoneS3Bucket:
        Value: !Ref BusinessZoneS3Bucket
    GlueWorkflow:
        Value: !Ref GlueWorkflow

Parameters:
    MasterUsername:
        Type: String

    MasterUserPassword:
        Type: String

    RedshiftClusterEndpoint:
        Type: String

    RedshiftSecurityGroupId:
        Type: String

    RedshiftPort:
        Type: String

    ClusterName:
        Type: String
        Default: redshift-cluster-1

    DBName:
        Type: String
        Default: meter-data

    Subnet1ID:
        Type: AWS::EC2::Subnet::Id

    VPCID:
        Type: AWS::EC2::VPC::Id

    RemoteAccessCIDR:
        Type: String

    GlueScriptsS3Bucket:
        Type: String

    GlueTempS3Bucket:
        Type: String

    VPCRouteTableId:
        Type: String

    AvailabilityZone:
        Type: AWS::EC2::AvailabilityZone::Name

    LandingzoneTransformer:
        Type: String

    CreateLandingZoneS3Bucket:
        Type: String
        Default: 'Yes'
        Description: Select 'No' if you have an existing S3 bucket with raw meter data which you would like to use. Otherwise leave default value as 'Yes'.
        AllowedValues:
        - 'Yes'
        - 'No'
    
    LandingZoneS3BucketName:
        Type: String
        Default: ""
        Description: (Conditional) You must provide a value if you select 'No' for 'Create Landing Zone bucket' parameter above.